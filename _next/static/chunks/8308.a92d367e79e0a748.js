"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8308],{58308:(e,t,n)=>{n.d(t,{coinbaseWallet:()=>o});var i=n(8759),a=n(16167),r=n(32544),c=n(18912),s=n(81645);function o(e={}){var t,h;let d,l,u,m,w,g,v,p,C;return"3"===e.version||e.headlessMode?(t=e,(0,i.U)(e=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:o.type,async connect({chainId:e}={}){try{let t=await this.getProvider(),n=(await t.request({method:"eth_requestAccounts"})).map(e=>(0,r.b)(e));u||(u=this.onAccountsChanged.bind(this),t.on("accountsChanged",u)),m||(m=this.onChainChanged.bind(this),t.on("chainChanged",m)),w||(w=this.onDisconnect.bind(this),t.on("disconnect",w));let i=await this.getChainId();if(e&&i!==e){let t=await this.switchChain({chainId:e}).catch(e=>{if(e.code===c.vx.code)throw e;return{id:i}});i=t?.id??i}return{accounts:n,chainId:i}}catch(e){if(/(user closed modal|accounts received is empty|user denied account)/i.test(e.message))throw new c.vx(e);throw e}},async disconnect(){let e=await this.getProvider();u&&(e.removeListener("accountsChanged",u),u=void 0),m&&(e.removeListener("chainChanged",m),m=void 0),w&&(e.removeListener("disconnect",w),w=void 0),e.disconnect(),e.close()},async getAccounts(){let e=await this.getProvider();return(await e.request({method:"eth_accounts"})).map(e=>(0,r.b)(e))},async getChainId(){let e=await this.getProvider();return Number(await e.request({method:"eth_chainId"}))},async getProvider(){if(!l){d=new(await (async()=>{let{default:e}=await Promise.all([n.e(4443),n.e(9466)]).then(n.t.bind(n,94443,19));return"function"!=typeof e&&"function"==typeof e.default?e.default:e})())({...t,reloadOnDisconnect:!1});let i=d.walletExtension?.getChainId(),a=e.chains.find(e=>t.chainId?e.id===t.chainId:e.id===i)||e.chains[0],r=t.chainId||a?.id,c=t.jsonRpcUrl||a?.rpcUrls.default.http[0];l=d.makeWeb3Provider(c,r)}return l},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:t,chainId:n}){let i=e.chains.find(e=>e.id===n);if(!i)throw new c.ch(new a.nk);let r=await this.getProvider();try{return await r.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,s.cK)(i.id)}]}),i}catch(e){if(4902===e.code)try{let e,a;e=t?.blockExplorerUrls?t.blockExplorerUrls:i.blockExplorers?.default.url?[i.blockExplorers?.default.url]:[],a=t?.rpcUrls?.length?t.rpcUrls:[i.rpcUrls.default?.http[0]??""];let c={blockExplorerUrls:e,chainId:(0,s.cK)(n),chainName:t?.chainName??i.name,iconUrls:t?.iconUrls,nativeCurrency:t?.nativeCurrency??i.nativeCurrency,rpcUrls:a};return await r.request({method:"wallet_addEthereumChain",params:[c]}),i}catch(e){throw new c.vx(e)}throw new c.ch(e)}},onAccountsChanged(t){0===t.length?this.onDisconnect():e.emitter.emit("change",{accounts:t.map(e=>(0,r.b)(e))})},onChainChanged(t){let n=Number(t);e.emitter.emit("change",{chainId:n})},async onDisconnect(t){e.emitter.emit("disconnect");let n=await this.getProvider();u&&(n.removeListener("accountsChanged",u),u=void 0),m&&(n.removeListener("chainChanged",m),m=void 0),w&&(n.removeListener("disconnect",w),w=void 0)}}))):(h=e,(0,i.U)(e=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:o.type,async connect({chainId:e,...t}={}){try{let n=await this.getProvider(),i=(await n.request({method:"eth_requestAccounts",params:"instantOnboarding"in t&&t.instantOnboarding?[{onboarding:"instant"}]:[]})).map(e=>(0,r.b)(e));v||(v=this.onAccountsChanged.bind(this),n.on("accountsChanged",v)),p||(p=this.onChainChanged.bind(this),n.on("chainChanged",p)),C||(C=this.onDisconnect.bind(this),n.on("disconnect",C));let a=await this.getChainId();if(e&&a!==e){let t=await this.switchChain({chainId:e}).catch(e=>{if(e.code===c.vx.code)throw e;return{id:a}});a=t?.id??a}return{accounts:i,chainId:a}}catch(e){if(/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(e.message))throw new c.vx(e);throw e}},async disconnect(){let e=await this.getProvider();v&&(e.removeListener("accountsChanged",v),v=void 0),p&&(e.removeListener("chainChanged",p),p=void 0),C&&(e.removeListener("disconnect",C),C=void 0),e.disconnect(),e.close?.()},async getAccounts(){let e=await this.getProvider();return(await e.request({method:"eth_accounts"})).map(e=>(0,r.b)(e))},async getChainId(){let e=await this.getProvider();return Number(await e.request({method:"eth_chainId"}))},async getProvider(){if(!g){let t="string"==typeof h.preference?{options:h.preference}:{...h.preference,options:h.preference?.options??"all"},{createCoinbaseWalletSDK:i}=await n.e(8597).then(n.bind(n,78597));g=i({...h,appChainIds:e.chains.map(e=>e.id),preference:t}).getProvider()}return g},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:t,chainId:n}){let i=e.chains.find(e=>e.id===n);if(!i)throw new c.ch(new a.nk);let r=await this.getProvider();try{return await r.request({method:"wallet_switchEthereumChain",params:[{chainId:(0,s.cK)(i.id)}]}),i}catch(e){if(4902===e.code)try{let e,a;e=t?.blockExplorerUrls?t.blockExplorerUrls:i.blockExplorers?.default.url?[i.blockExplorers?.default.url]:[],a=t?.rpcUrls?.length?t.rpcUrls:[i.rpcUrls.default?.http[0]??""];let c={blockExplorerUrls:e,chainId:(0,s.cK)(n),chainName:t?.chainName??i.name,iconUrls:t?.iconUrls,nativeCurrency:t?.nativeCurrency??i.nativeCurrency,rpcUrls:a};return await r.request({method:"wallet_addEthereumChain",params:[c]}),i}catch(e){throw new c.vx(e)}throw new c.ch(e)}},onAccountsChanged(t){0===t.length?this.onDisconnect():e.emitter.emit("change",{accounts:t.map(e=>(0,r.b)(e))})},onChainChanged(t){let n=Number(t);e.emitter.emit("change",{chainId:n})},async onDisconnect(t){e.emitter.emit("disconnect");let n=await this.getProvider();v&&(n.removeListener("accountsChanged",v),v=void 0),p&&(n.removeListener("chainChanged",p),p=void 0),C&&(n.removeListener("disconnect",C),C=void 0)}})))}o.type="coinbaseWallet"}}]);